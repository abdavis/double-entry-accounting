CREATE TYPE account_type AS ENUM ('asset', 'liability', 'equity', 'expense', 'revenue');

CREATE TABLE account_category(
    id INTEGER PRIMARY KEY,
    name VARCHAR(20) NOT NULL,
    description VARCHAR(500),
    parent INTEGER REFERENCES account_category(id),
    kind ACCOUNT_TYPE,
    CHECK (
        (parent IS NULL AND kind IS NOT NULL) 
        OR (parent IS NOT NULL AND kind IS NULL)
        )
);

CREATE TABLE account(
    id INTEGER GENERATED BY DEFAULT AS IDENTITY(MINVALUE 100000) PRIMARY KEY,
    parent INTEGER REFERENCES account_category(id) NOT NULL,
    name VARCHAR(20),
    description VARCHAR(500)
);

CREATE TABLE balance(
    id INTEGER REFERENCES account(id),
    date TIMESTAMP WITH TIME ZONE,
    amount MONEY,
    PRIMARY KEY(id, date)
);

CREATE TABLE transaction(
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    date TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    description VARCHAR(500)
);
CREATE INDEX transaction_date ON transaction(date);

CREATE TABLE transaction_detail(
    transaction_id INTEGER REFERENCES transaction(id) NOT NULL,
    dr INTEGER REFERENCES account(id) NOT NULL,
    cr INTEGER REFERENCES account(id) NOT NULL,
    amount MONEY NOT NULL,
    PRIMARY KEY(transaction_id, dr, cr)
);

--views

CREATE VIEW last_balance AS SELECT id, date, amount
FROM (
    SELECT b.*, ROW_NUMBER() OVER (PARTITION BY id ORDER BY date DESC) AS rn
    FROM balance b
)
WHERE RN = 1;

CREATE VIEW account_kind AS 
WITH RECURSIVE t(id, parent, kind) AS (
    SELECT id, parent, NULL::account_type
    FROM account
    UNION ALL
    SELECT t.id, account_category.parent, account_category.kind
    FROM t
    INNER JOIN account_category
        ON t.parent = account_category.id
    WHERE account_category.id = t.parent
)
SELECT id, kind
FROM t 
WHERE kind IS NOT NULL
;

CREATE VIEW current_balance AS 
SELECT account_kind.id, account_kind.kind, COALESCE(last_balance.amount, 0::MONEY) +
    (COALESCE(debits.amount, 0::MONEY) - COALESCE(credits.amount, 0::MONEY)) *
    CASE WHEN kind IN ('asset', 'expense') THEN 1
        ELSE -1
    END
    AS amount
FROM account_kind
LEFT JOIN last_balance
    ON account_kind.id = last_balance.id
LEFT JOIN LATERAL (
    SELECT dr, SUM(amount) amount
    FROM transaction_detail
    INNER JOIN transaction
        ON transaction.id = transaction_detail.transaction_id
    WHERE last_balance.date IS NULL
        OR transaction.date >= last_balance.date
    GROUP BY dr
) debits
    ON debits.dr = account_kind.id
LEFT JOIN LATERAL (
    SELECT cr, SUM(amount) amount
    FROM transaction_detail
    INNER JOIN transaction
        ON transaction.id = transaction_detail.transaction_id
    WHERE last_balance.date IS NULL
        OR transaction.date >= last_balance.date
    GROUP BY cr
) credits
    ON credits.cr = account_kind.id
;
