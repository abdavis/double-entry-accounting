CREATE TYPE account_type AS ENUM ('asset', 'liability', 'equity', 'expense', 'revenue');

CREATE TABLE account_category(
    id INTEGER PRIMARY KEY,
    name VARCHAR(20) NOT NULL,
    description VARCHAR(500),
    parent INTEGER REFERENCES account_category(id),
    kind ACCOUNT_TYPE,
    CHECK (
        (parent IS NULL AND kind IS NOT NULL) 
        OR (parent IS NOT NULL AND kind IS NULL)
        )
);

CREATE TABLE account(
    id INTEGER GENERATED BY DEFAULT AS IDENTITY(MINVALUE 100000) PRIMARY KEY,
    parent INTEGER REFERENCES account_category(id) NOT NULL,
    name VARCHAR(20),
    description VARCHAR(500)
);

CREATE TABLE balance(
    id INTEGER REFERENCES account(id),
    date TIMESTAMP WITH TIME ZONE,
    amount MONEY,
    PRIMARY KEY(id, date)
);

CREATE TABLE transaction(
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    date TIMESTAMP WITH TIME ZONE NOT NULL,
    description VARCHAR(500)
);
CREATE INDEX transaction_date ON transaction(date);

CREATE TABLE transaction_detail(
    transaction_id INTEGER REFERENCES transaction(id) NOT NULL,
    dr INTEGER REFERENCES account(id) NOT NULL,
    cr INTEGER REFERENCES account(id) NOT NULL,
    amount MONEY NOT NULL,
    PRIMARY KEY(transaction_id, dr, cr)
);

--views

create view last_balance as select id, date, amount from (
    select b.*, row_number() over (partition by id order by date desc) as rn
    from balance b 
)
where rn = 1;

create view current_balance as select account.id, coalesce(debits.amount, 0::money) - coalesce(credits.amount, 0::money) as amount from account
left join last_balance
    on account.id = last_balance.id
left join lateral (
    select dr, sum(amount) as amount
    from transaction_detail
    inner join transaction
        on transaction.id = transaction_detail.transaction_id
    where last_balance.date is null
        or transaction.date >= last_balance.date
    group by dr
) as debits
    on debits.dr = account.id
left join lateral (
    select cr, sum(amount) as amount
    from transaction_detail
    inner join transaction
        on transaction.id = transaction_detail.transaction_id
    where last_balance.date is null
        or transaction.date >= last_balance.date
    group by cr
) as credits
    on credits.cr = account.id;
